// services/RouteService.js
// Servi√ßo para comunica√ß√£o com a API de rotas

import { getBackendIP, testConnection } from '../utils/networkUtils';

// Fun√ß√£o para obter a URL base da API dinamicamente
const getAPIBaseURL = async () => {
  console.log('üîç Detectando IP do backend...');
  const ip = await getBackendIP();
  const baseURL = `http://${ip}:5050/api/routing`;
  
  console.log(`üåê IP detectado: ${ip}`);
  console.log(`üåê URL base: ${baseURL}`);
  
  // Testa a conex√£o antes de retornar
  console.log('üß™ Testando conex√£o com o backend...');
  const isOnline = await testConnection(ip, 5050, 5000);
    if (!isOnline) {
    console.warn(`‚ö†Ô∏è Backend parece estar offline em ${ip}:5050`);
    console.warn('‚ö†Ô∏è Tentando mesmo assim...');
  } else {
    console.log(`‚úÖ Backend est√° online em ${ip}:5050`);
  }
  
  return baseURL;
};

class RouteService {
  static async calculateRoute(startAddress, endAddress, currentTime = null) {
    try {
      console.log('üöÄ Iniciando c√°lculo de rota...');
      console.log('üìç Origem:', startAddress);
      console.log('üéØ Destino:', endAddress);
      
      const API_BASE_URL = await getAPIBaseURL();
      const fullURL = `${API_BASE_URL}/test-route`;
      console.log('üåê URL completa:', fullURL);
        // Testa a conex√£o novamente antes de fazer a requisi√ß√£o
      const ip = await getBackendIP();
      const isBackendOnline = await testConnection(ip, 5050, 3000);
      
      if (!isBackendOnline) {
        console.error('‚ùå Backend n√£o est√° acess√≠vel');
        throw new Error('Servidor n√£o est√° acess√≠vel. Verifique se o backend est√° rodando.');
      }
      
      console.log('‚úÖ Backend est√° acess√≠vel, fazendo requisi√ß√£o...');
      
      const requestBody = {
        start_address: startAddress,
        end_address: endAddress,
        current_time: currentTime || new Date().toLocaleTimeString('pt-BR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        })
      };
      
      console.log('üì§ Enviando request:', JSON.stringify(requestBody, null, 2));
      
      // Criar AbortController para timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 segundos
      
      const response = await fetch(fullURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);

      console.log('üì• Response status:', response.status);
      console.log('üì• Response headers:', response.headers);
      
      const data = await response.json();
      console.log('üìä Response data:', JSON.stringify(data, null, 2));
      
      if (!response.ok) {
        throw new Error(data.error || 'Erro ao calcular rota');
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erro no RouteService:', error);
      
      // Tratamento espec√≠fico para timeout
      if (error.name === 'AbortError') {
        throw new Error('Timeout: A requisi√ß√£o demorou muito para responder. Tente novamente.');
      }
      
      // Tratamento para erro de rede
      if (error.message.includes('fetch')) {
        throw new Error('Erro de conectividade: Verifique sua conex√£o com a internet.');
      }
      
      throw error;
    }
  }

  static async geocodeAddress(address, city = 'Campinas, SP') {
    try {
      const API_BASE_URL = await getAPIBaseURL();
      
      const response = await fetch(`${API_BASE_URL}/geocode`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          address,
          city
        }),
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Erro ao geocodificar endere√ßo');
      }

      return data;    } catch (error) {
      console.error('Erro no geocoding:', error);
      throw error;
    }
  }
}

export default RouteService;