@echo off
REM ==============================================
REM INFRAALERT - VALIDACAO DO AMBIENTE
REM ==============================================

echo üîç InfraAlert - Validacao do Ambiente
echo ========================================
echo.

set ERRORS=0

REM Verificar Node.js
echo üì¶ Verificando Node.js...
node -v >nul 2>&1
if %errorlevel% equ 0 (
    for /f "tokens=*" %%i in ('node -v') do echo ‚úÖ Node.js %%i encontrado
) else (
    echo ‚ùå Node.js nao encontrado
    set /a ERRORS+=1
)

REM Verificar npm
echo üì¶ Verificando npm...
npm -v >nul 2>&1
if %errorlevel% equ 0 (
    for /f "tokens=*" %%i in ('npm -v') do echo ‚úÖ npm %%i encontrado
) else (
    echo ‚ùå npm nao encontrado
    set /a ERRORS+=1
)

REM Verificar Python
echo üêç Verificando Python...
python --version >nul 2>&1
if %errorlevel% equ 0 (
    for /f "tokens=*" %%i in ('python --version') do echo ‚úÖ %%i encontrado
) else (
    echo ‚ùå Python nao encontrado
    set /a ERRORS+=1
)

REM Verificar Expo CLI
echo üì± Verificando Expo CLI...
npx expo --version >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Expo CLI encontrado
) else (
    echo ‚ö†Ô∏è  Expo CLI nao encontrado - instale com: npm install -g @expo/cli
)

echo.
echo üìÅ Verificando estrutura do projeto...

REM Verificar backend
if exist "backend\package.json" (
    echo ‚úÖ Backend encontrado
) else (
    echo ‚ùå Backend nao encontrado
    set /a ERRORS+=1
)

REM Verificar frontend
if exist "frontend\package.json" (
    echo ‚úÖ Frontend encontrado
) else (
    echo ‚ùå Frontend nao encontrado
    set /a ERRORS+=1
)

REM Verificar API Python
if exist "backend\rota-segura-api\requirements.txt" (
    echo ‚úÖ API Python encontrada
) else (
    echo ‚ùå API Python nao encontrada
    set /a ERRORS+=1
)

echo.
echo üîß Verificando configuracoes...

REM Verificar .env
if exist "backend\.env" (
    echo ‚úÖ Arquivo .env encontrado
) else (
    echo ‚ö†Ô∏è  Arquivo .env nao encontrado - copie de .env.example
)

REM Verificar node_modules do backend
if exist "backend\node_modules" (
    echo ‚úÖ Dependencias do backend instaladas
) else (
    echo ‚ö†Ô∏è  Dependencias do backend nao instaladas - execute: cd backend && npm install
)

REM Verificar node_modules do frontend
if exist "frontend\node_modules" (
    echo ‚úÖ Dependencias do frontend instaladas
) else (
    echo ‚ö†Ô∏è  Dependencias do frontend nao instaladas - execute: cd frontend && npm install
)

REM Verificar venv Python
if exist "backend\rota-segura-api\venv" (
    echo ‚úÖ Ambiente virtual Python encontrado
) else (
    echo ‚ö†Ô∏è  Ambiente virtual Python nao encontrado - execute: cd backend\rota-segura-api && python -m venv venv
)

echo.
echo üåê Verificando conectividade...

REM Testar portas
netstat -ano | findstr :3000 >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚ö†Ô∏è  Porta 3000 esta em uso
) else (
    echo ‚úÖ Porta 3000 disponivel
)

netstat -ano | findstr :5000 >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚ö†Ô∏è  Porta 5000 esta em uso
) else (
    echo ‚úÖ Porta 5000 disponivel
)

echo.
echo üìä Verificando IP local...
for /f "tokens=2 delims=:" %%i in ('ipconfig ^| findstr "IPv4"') do (
    for /f "tokens=1" %%j in ("%%i") do echo üåê IP Local: %%j
)

echo.
echo =======================================
if %ERRORS% equ 0 (
    echo ‚úÖ VALIDACAO CONCLUIDA COM SUCESSO!
    echo Todos os requisitos estao atendidos.
    echo.
    echo üöÄ PROXIMOS PASSOS:
    echo 1. Configure o arquivo backend\.env
    echo 2. Configure o IP no frontend\config.js
    echo 3. Execute: cd backend ^&^& npm run dev
    echo 4. Execute: cd frontend ^&^& npm start
) else (
    echo ‚ùå VALIDACAO FALHOU!
    echo Encontrados %ERRORS% problema(s).
    echo Corrija os erros acima antes de continuar.
)

echo =======================================
echo.
pause
